{"version":3,"sources":["services/api.js","pages/QrcodeBatch.jsx","pages/Table.jsx","pages/QrcodeUnit.jsx","pages/Files.jsx","pages/Main.jsx","App.js","index.js"],"names":["api","axios","create","baseURL","config","host","QrcodeBatch","useState","selection","setSelection","location","setLocation","spin","setSpin","e","a","preventDefault","data","post","resp","status","alert","Card","className","classsName","Spinning","enable","onSubmit","FormControl","component","FormLabel","RadioGroup","row","aria-label","name","defaultValue","value","onChange","target","FormControlLabel","control","Radio","color","label","TextareaAutosize","maxlenght","rowsMin","placeholder","Button","variant","type","props","TablePaginationActions","theme","useTheme","count","page","rowsPerPage","onChangePage","Fragment","IconButton","onClick","event","disabled","direction","Math","ceil","max","CustomPaginationActionsTable","rows","Name","React","setPage","setRowsPerPage","StyledTableCell","withStyles","head","backgroundColor","palette","common","black","white","body","fontSize","TableCell","StyledTableRow","root","action","hover","TableRow","TableContainer","Paper","Table","TableHead","Title","TableBody","slice","map","index","key","scope","TableFooter","TablePagination","rowsPerPageOptions","length","newPage","onChangeRowsPerPage","parseInt","ActionsComponent","QrcodeUnit","prefix","setPrefix","sufix","setSufix","columm","setColumm","tableString","setTableString","useEffect","tableTemp","TextField","id","concat","splice","Files","path","setPath","files","setFiles","get","then","res","catch","err","TabPanel","children","other","role","hidden","aria-labelledby","Box","p","Typography","a11yProps","useStyles","makeStyles","flexGrow","background","paper","SimpleTabs","classes","setValue","AppBar","position","Tabs","newValue","Tab","App","ReactDOM","render","document","getElementById"],"mappings":"keAMeA,EAHJC,IAAMC,OAAO,CACpBC,QAAQC,EAAOC,OCgFJC,MAxEf,WAAwB,IAAD,EAEeC,mBAAS,QAFxB,mBAEZC,EAFY,KAEDC,EAFC,OAGaF,mBAAS,IAHtB,mBAGZG,EAHY,KAGFC,EAHE,OAIKJ,oBAAS,GAJd,mBAIZK,EAJY,KAINC,EAJM,iDAMnB,WAAiCC,GAAjC,iBAAAC,EAAA,6DACID,EAAEE,iBACFH,GAAQ,GACFI,EAAO,CACTT,YACAE,YALR,kBAS2BV,EAAIkB,KAAK,SAAUD,GAT9C,OAUiC,QADnBE,EATd,QAUiBF,KAAKG,QACVP,GAAQ,GACRQ,MAAM,iCACsB,UAArBF,EAAKF,KAAKG,QACjBP,GAAQ,GACRQ,MAAM,8IAENR,GAAQ,GACRQ,MAAM,+CAlBlB,kDAsBQR,GAAQ,GACRQ,MAAM,8CAvBd,QAyBIZ,EAAa,QACbE,EAAY,IA1BhB,2DANmB,sBAmCnB,OACI,6BACI,kBAACW,EAAA,EAAD,KACI,yBAAKC,UAAU,QACf,wBAAIC,WAAW,QAAf,0BACA,kBAACC,EAAD,CAAUC,OAAQd,IAClB,6BACA,0BAAMe,SA1CC,6CA2CH,kBAACC,EAAA,EAAD,CAAaC,UAAU,YACnB,kBAACC,EAAA,EAAD,CAAWD,UAAU,UAArB,SACA,kBAACE,EAAA,EAAD,CAAYC,KAAG,EAACC,aAAW,WAAWC,KAAK,WAAWC,aAAa,OAAOC,MAAO5B,EAAW6B,SAAU,SAAAvB,GAAC,OAAIL,EAAaK,EAAEwB,OAAOF,SAC7H,yBAAKb,UAAU,aACX,kBAACgB,EAAA,EAAD,CAAkBH,MAAM,OAAOI,QAAS,kBAACC,EAAA,EAAD,CAAOC,MAAM,YAAcC,MAAM,SACzE,kBAACJ,EAAA,EAAD,CAAkBH,MAAM,OAAOI,QAAS,kBAACC,EAAA,EAAD,CAAOC,MAAM,YAAcC,MAAM,SACzE,kBAACJ,EAAA,EAAD,CAAkBH,MAAM,SAASI,QAAS,kBAACC,EAAA,EAAD,CAAOC,MAAM,YAAcC,MAAM,cAIvF,kBAACb,EAAA,EAAD,CAAWD,UAAU,UAArB,uBACA,6BACI,kBAACe,EAAA,EAAD,CAAkBrB,UAAU,WAAWa,MAAO1B,EAAU2B,SAAU,SAAAvB,GAAC,OAAIH,EAAYG,EAAEwB,OAAOF,QAAQS,UAAW,IAAMZ,aAAW,iBAAiBa,QAAS,GAAIC,YAAY,yMAE9K,6BACA,yBAAKxB,UAAU,UACX,kBAACyB,EAAA,EAAD,CAAQC,QAAQ,YAAYP,MAAM,UAAUQ,KAAK,UAAjD,0BAexB,SAASzB,EAAS0B,GAEd,OAAqB,IAAjBA,EAAMzB,OAEC,yBAAKH,UAAU,YAAW,wEAI1B,8B,gMC5Ef,SAAS6B,EAAuBD,GAE9B,IAAME,EAAQC,cACNC,EAA2CJ,EAA3CI,MAAOC,EAAoCL,EAApCK,KAAMC,EAA8BN,EAA9BM,YAAaC,EAAiBP,EAAjBO,aAkBlC,OACE,kBAAC,IAAMC,SAAP,KACE,6BACA,kBAACC,EAAA,EAAD,CACEC,QApB6B,SAACC,GAClCJ,EAAaI,EAAO,IAoBhBC,SAAmB,IAATP,EACVvB,aAAW,sBAEU,QAApBoB,EAAMW,UAAsB,kBAAC,IAAD,MAAmB,kBAAC,IAAD,QAGlD,6BACA,kBAACJ,EAAA,EAAD,CAAYC,QAxBc,SAACC,GAC7BJ,EAAaI,EAAON,EAAO,IAuBmBO,SAAmB,IAATP,EAAYvB,aAAW,YACtD,QAApBoB,EAAMW,UAAsB,kBAAC,IAAD,MAAyB,kBAAC,IAAD,QAGxD,6BACA,kBAACJ,EAAA,EAAD,CACEC,QA1BwB,SAACC,GAC7BJ,EAAaI,EAAON,EAAO,IA0BvBO,SAAUP,GAAQS,KAAKC,KAAKX,EAAQE,GAAe,EACnDxB,aAAW,cAEU,QAApBoB,EAAMW,UAAsB,kBAAC,IAAD,MAAwB,kBAAC,IAAD,QAGvD,6BACA,kBAACJ,EAAA,EAAD,CACEC,QA/B4B,SAACC,GACjCJ,EAAaI,EAAOG,KAAKE,IAAI,EAAGF,KAAKC,KAAKX,EAAQE,GAAe,KA+B7DM,SAAUP,GAAQS,KAAKC,KAAKX,EAAQE,GAAe,EACnDxB,aAAW,oBAEU,QAApBoB,EAAMW,UAAsB,kBAAC,IAAD,MAAoB,kBAAC,IAAD,SAc1C,SAASI,GAA6BjB,GAEnD,IAAMkB,EAAOlB,EAAMmB,KAFuC,EAGlCC,IAAMhE,SAAS,GAHmB,mBAGnDiD,EAHmD,KAG7CgB,EAH6C,OAIpBD,IAAMhE,SAAS,GAJK,mBAInDkD,EAJmD,KAItCgB,EAJsC,KAcpDC,EAAkBC,aAAW,SAACtB,GAAD,MAAY,CAC7CuB,KAAM,CACJC,gBAAiBxB,EAAMyB,QAAQC,OAAOC,MACtCtC,MAAOW,EAAMyB,QAAQC,OAAOE,OAE9BC,KAAM,CACJC,SAAU,OANUR,CAQpBS,KAEEC,EAAiBV,aAAW,SAACtB,GAAD,MAAY,CAC5CiC,KAAM,CACJ,qBAAsB,CACpBT,gBAAiBxB,EAAMyB,QAAQS,OAAOC,WAHrBb,CAMnBc,KAEJ,OACE,kBAACC,EAAA,EAAD,CAAgBnE,UAAU,eAAcM,UAAW8D,KACjD,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACJ,EAAA,EAAD,KACE,kBAACf,EAAD,KAAkBvB,EAAM2C,SAI5B,kBAACC,EAAA,EAAD,MACItC,EAAc,EACZY,EAAK2B,MAAMxC,EAAOC,EAAaD,EAAOC,EAAcA,GACpDY,GACF4B,KAAI,SAACjE,EAAKkE,GAAN,OACJ,kBAACb,EAAD,CAAgBc,IAAKD,GACnB,kBAACxB,EAAD,CAAiB7C,UAAU,KAAKuE,MAAM,OACnCpE,QAMT,kBAACqE,EAAA,EAAD,KACE,kBAACZ,EAAA,EAAD,KACE,kBAACa,EAAA,EAAD,CACEC,mBAAoB,CAAC,EAAG,GAAI,GAAI,CAAE5D,MAAO,QAASP,OAAQ,IAC1DmB,MAAOc,EAAKmC,OACZ/C,YAAaA,EACbD,KAAMA,EACNE,aAxDa,SAACI,EAAO2C,GAC/BjC,EAAQiC,IAwDEC,oBArDoB,SAAC5C,GAC/BW,EAAekC,SAAS7C,EAAMxB,OAAOF,MAAO,KAC5CoC,EAAQ,IAoDEoC,iBAAkBxD,QClBjByD,OAxHf,WAAuB,IAAD,EAEQtG,mBAAS,IAFjB,mBAEbuG,EAFa,KAELC,EAFK,OAGMxG,mBAAS,IAHf,mBAGbyG,EAHa,KAGNC,EAHM,OAII1G,oBAAS,GAJb,mBAIbK,EAJa,KAIPC,EAJO,OAKQN,mBAAS,IALjB,mBAKb2G,EALa,KAKLC,EALK,OAMkB5G,mBAAS,IAN3B,mBAMb6G,EANa,KAMAC,EANA,iDA4BpB,WAAgCvG,GAAhC,iBAAAC,EAAA,6DACED,EAAEE,iBACFH,GAAQ,GACFI,EAAOiG,EAAOjB,KAAI,SAAAiB,GACtB,OAAOA,EAAOJ,OAASI,EAAOF,SAJlC,kBASuBhH,EAAIkB,KAAK,OAAQD,GATxC,OAU6B,QADnBE,EATV,QAUaF,KAAKG,QACZP,GAAQ,GACRQ,MAAM,iCACwB,UAArBF,EAAKF,KAAKG,QACnBP,GAAQ,GACRQ,MAAM,8IAENR,GAAQ,GACRQ,MAAM,+CAER8F,EAAU,IApBd,kDAuBItG,GAAQ,GACRQ,MAAM,8CAxBV,2DA5BoB,sBAyDpB,OAjDAiG,qBAAU,WAER,IAAMC,EAAYL,EAAOjB,KAAI,SAAAiB,GAC3B,OAAOA,EAAOJ,OAASI,EAAOF,SAEhCK,EAAeE,KAEd,CAACL,IA2CF,6BAEE,kBAAC5F,EAAA,EAAD,KACE,yBAAKC,UAAU,QACb,qDACA,kBAAC,GAAD,CAAUG,OAAQd,IAClB,6BAEA,0BAAMe,SAlEM,6CAmEV,kBAACG,EAAA,EAAD,CAAWP,UAAU,YAAYM,UAAU,UAA3C,mBACA,yBAAKN,UAAU,gBACb,yBAAKA,UAAU,UACb,kBAACiG,EAAA,EAAD,CACEjG,UAAU,aACVkG,GAAG,kBACH9E,MAAM,UACNO,KAAK,SACLD,QAAQ,WACRb,MAAO0E,EAAQzE,SAAU,SAAAvB,GAAC,OAAIiG,EAAUjG,EAAEwB,OAAOF,WAErD,yBAAKb,UAAU,SACb,kBAACiG,EAAA,EAAD,CACEjG,UAAU,YACVkG,GAAG,kBACH9E,MAAM,oBACNO,KAAK,SACLD,QAAQ,WACRb,MAAO4E,EAAO3E,SAAU,SAAAvB,GAAC,OAAImG,EAASnG,EAAEwB,OAAOF,WAEnD,yBAAKb,UAAU,aACb,yBAAKA,UAAU,cACb,kBAACyB,EAAA,EAAD,CAAQC,QAAQ,YAAYP,MAAM,UAAUmB,QAxE5D,SAAiB/C,GACfqG,EAAUD,EAAOQ,OAAO,CAAEZ,OAAQA,EAAQE,MAAOA,KACjDD,EAAU,IACVE,EAAS,MAqEK,cAIF,yBAAK1F,UAAU,eACb,kBAACyB,EAAA,EAAD,CAAQC,QAAQ,YAAYP,MAAM,UAAUmB,QAvE5D,SAAoB/C,GAClBqG,EAAUD,EAAOS,OAAO,MAsEV,cAMN,yBAAKpG,UAAU,aACf,kBAACO,EAAA,EAAD,CAAYD,UAAU,UAAtB,wBAEA,6BACE,kBAAC,GAAD,CAAgByC,KAAM8C,EAAatB,MAAO,4CAE5C,wBAAIvE,UAAU,YACd,yBAAKA,UAAU,UACb,kBAACyB,EAAA,EAAD,CAAQc,MAAM,iBAAiBb,QAAQ,YAAYP,MAAM,UAAUQ,KAAK,UAAxE,0BAed,SAASzB,GAAS0B,GAEhB,OAAqB,IAAjBA,EAAMzB,OAED,yBAAKH,UAAU,YAAW,wEAI1B,8B,OCvGIqG,OA/Bf,WAAkB,IAAD,EAESrH,mBAAS,IAFlB,mBAERsH,EAFQ,KAEFC,EAFE,OAGWvH,mBAAS,IAHpB,mBAGRwH,EAHQ,KAGDC,EAHC,KAiBf,OAZAV,qBAAU,WAERtH,EAAIiI,IAAI,SAASC,MAAK,SAAAC,GACpBH,EAASG,EAAIlH,KAAKG,QAClB0G,EAAQK,EAAIlH,KAAK4G,SAEhBO,OAAM,SAAAC,GACPhH,MAAM,kCAGP,IAGD,6BACE,kBAACC,EAAA,EAAD,KACE,yBAAKC,UAAU,aACb,kDACA,6BACA,2BAAG,0CAAwBsG,GAC3B,kBAAC,GAAD,CAAgBvD,KAAMyD,EAAOjC,MAAO,yBCjB9C,SAASwC,GAASnF,GAAQ,IAChBoF,EAAqCpF,EAArCoF,SAAUnG,EAA2Be,EAA3Bf,MAAO8D,EAAoB/C,EAApB+C,MAAUsC,EADZ,YACsBrF,EADtB,8BAGvB,OACE,uCACEsF,KAAK,WACLC,OAAQtG,IAAU8D,EAClBuB,GAAE,0BAAqBvB,GACvByC,kBAAA,qBAA+BzC,IAC3BsC,GAEHpG,IAAU8D,GACT,kBAAC0C,EAAA,EAAD,CAAKC,EAAG,GACN,kBAACC,EAAA,EAAD,KAAaP,KAavB,SAASQ,GAAU7C,GACjB,MAAO,CACLuB,GAAG,cAAD,OAAgBvB,GAClB,gBAAgB,mBAAhB,OAAoCA,IAIxC,IAAM8C,GAAYC,aAAW,SAAC5F,GAAD,MAAY,CACvCiC,KAAM,CACJ4D,SAAU,EACVrE,gBAAiBxB,EAAMyB,QAAQqE,WAAWC,WAI/B,SAASC,KACtB,IAAMC,EAAUN,KADmB,EAETzE,IAAMhE,SAAS,GAFN,mBAE5B6B,EAF4B,KAErBmH,EAFqB,KAQnC,OACE,yBAAKhI,UAAW+H,EAAQhE,MACtB,kBAACkE,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAAMtH,MAAOA,EAAOC,SAPL,SAACyB,EAAO6F,GAC3BJ,EAASI,IAMuC1H,aAAW,eACrD,kBAAC2H,EAAA,EAAD,eAAKjH,MAAM,oBAAuBoG,GAAU,KAC5C,kBAACa,EAAA,EAAD,eAAKjH,MAAM,uBAAuBoG,GAAU,KAC5C,kBAACa,EAAA,EAAD,eAAKjH,MAAM,oBAAuBoG,GAAU,OAGhD,kBAACT,GAAD,CAAUlG,MAAOA,EAAO8D,MAAO,GAC7B,kBAAC,EAAD,OAEF,kBAACoC,GAAD,CAAUlG,MAAOA,EAAO8D,MAAO,GAC7B,kBAAC,GAAD,OAEF,kBAACoC,GAAD,CAAUlG,MAAOA,EAAO8D,MAAO,GAC7B,kBAAC,GAAD,QCpEO2D,OANf,WACE,OACE,kBAAC,GAAD,OCCJC,IAASC,OAAQ,kBAAC,GAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.21f1afe5.chunk.js","sourcesContent":["import axios from 'axios'\nimport config from'../config.json'\n\nconst api =axios.create({\n    baseURL:config.host\n})\nexport default api","import React, { useState } from 'react'\r\nimport './QrcodeBatch.css'\r\nimport { Card } from '@material-ui/core'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormLabel from '@material-ui/core/FormLabel'\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize'\r\nimport Button from '@material-ui/core/Button'\r\nimport api from '../services/api'\r\n\r\nfunction QrcodeBatch() {\r\n\r\n    const [selection, setSelection] = useState('FLOC')\r\n    const [location, setLocation] = useState('')\r\n    const [spin, setSpin] = useState(false)\r\n\r\n    async function handleQrcodeBatch(e) {\r\n        e.preventDefault()\r\n        setSpin(true)\r\n        const data = {\r\n            selection,\r\n            location,\r\n        }\r\n\r\n        try {\r\n            const resp = await api.post('qrcode', data)\r\n            if (resp.data.status === 'ok') {\r\n                setSpin(false)\r\n                alert(\"QR-Codes gerados com sucesso\")\r\n            } else if (resp.data.status === 'dados') {\r\n                setSpin(false)\r\n                alert(\"VERIFICAR OS DADOS DIGITADOS. \\r\\nFalta a vírgula no último código ou a quantidade de localizações é excedente a 1000.\")\r\n            } else {\r\n                setSpin(false)\r\n                alert(\"Erro ao gerar os QR-Codes. Tente novamente\")\r\n            }\r\n\r\n        } catch (error) {\r\n            setSpin(false)\r\n            alert(\"Erro ao gerar os QR-Codes. Tente novamente\")\r\n        }\r\n        setSelection('FLOC')\r\n        setLocation('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <div className=\"card\">\r\n                <h1 classsName=\"main\">Gerar QR-Code Batelada</h1>\r\n                <Spinning enable={spin} />\r\n                <hr />\r\n                <form onSubmit={handleQrcodeBatch}>\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\">Tipo:</FormLabel>\r\n                        <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"FLOC\" value={selection} onChange={e => setSelection(e.target.value)}>\r\n                            <div className=\"selection\">\r\n                                <FormControlLabel value=\"FLOC\" control={<Radio color=\"primary\" />} label=\"FLOC\" />\r\n                                <FormControlLabel value=\"EQUI\" control={<Radio color=\"primary\" />} label=\"EQUI\" />\r\n                                <FormControlLabel value=\"Outros\" control={<Radio color=\"primary\" />} label=\"Outros\" />\r\n                            </div>\r\n                        </RadioGroup>\r\n                    </FormControl>\r\n                    <FormLabel component=\"legend\">Localizações:</FormLabel>\r\n                    <div >\r\n                        <TextareaAutosize className=\"textarea\" value={location} onChange={e => setLocation(e.target.value)} maxlenght={1000} aria-label=\"minimum height\" rowsMin={14} placeholder=\"Cole as localizações aqui. Para separação das localizações deve-se usar 'VÍRGULA', CONSIDERAR 'VÍRGULA NA ÚLTIMA LOCALIZAÇÃO' ex:FLOCF3100,FLOC31001,...FLOC31003,\" />\r\n                    </div>\r\n                    <hr />\r\n                    <div className=\"button\">\r\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                            Gerar códigos\r\n                        </Button>\r\n                    </div>\r\n                    </form>\r\n                    </div>\r\n                    \r\n                </Card>\r\n                \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QrcodeBatch\r\n\r\nfunction Spinning(props) {\r\n\r\n    if (props.enable === true) {\r\n\r\n        return <div className=\"waitcode\"><h4>Aguardando geração de arquivos...</h4></div>\r\n\r\n    } else {\r\n\r\n        return <div></div>\r\n\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useTheme, withStyles } from '@material-ui/core/styles'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableFooter from '@material-ui/core/TableFooter'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage'\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft'\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport LastPageIcon from '@material-ui/icons/LastPage'\r\n\r\nfunction TablePaginationActions(props) {\r\n\r\n  const theme = useTheme()\r\n  const { count, page, rowsPerPage, onChangePage } = props\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0)\r\n  }\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1)\r\n  }\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1)\r\n  }\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1))\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"Primeira página\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      </div>\r\n      <div>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"Anterior\">\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n      </IconButton>\r\n      </div>\r\n      <div>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"Próximo\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n      </IconButton>\r\n      </div>\r\n      <div>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"Última pagina\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default function CustomPaginationActionsTable(props) {\r\n\r\n  const rows = props.Name\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  }))(TableCell)\r\n\r\n  const StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      '&:nth-of-type(odd)': {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  }))(TableRow)\r\n\r\n  return (\r\n    <TableContainer className='tableSetting'component={Paper}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>{props.Title}</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        \r\n        <TableBody>\r\n          {(rowsPerPage > 0\r\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n            : rows\r\n          ).map((row, index) => (\r\n            <StyledTableRow key={index}>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {row}\r\n              </StyledTableCell>\r\n            </StyledTableRow>\r\n          ))}\r\n\r\n        </TableBody>\r\n        <TableFooter >\r\n          <TableRow>\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 25, { label: 'Todos', value: -1 }]}\r\n              count={rows.length}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n              ActionsComponent={TablePaginationActions}\r\n            />\r\n          </TableRow>\r\n        </TableFooter>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport './QrcodeUnit.css'\r\nimport { Card } from '@material-ui/core'\r\nimport FormLabel from '@material-ui/core/FormLabel'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport api from '../services/api'\r\nimport TableComponent from './Table'\r\n\r\nfunction QrcodeUnit() {\r\n\r\n  const [prefix, setPrefix] = useState('')\r\n  const [sufix, setSufix] = useState('')\r\n  const [spin, setSpin] = useState(false)\r\n  const [columm, setColumm] = useState([])\r\n  const [tableString, setTableString] = useState([])\r\n\r\n  useEffect(() => {\r\n\r\n    const tableTemp = columm.map(columm => {\r\n      return columm.prefix + columm.sufix\r\n    })\r\n    setTableString(tableTemp)\r\n\r\n  }, [columm])\r\n\r\n  function additem(e) {\r\n    setColumm(columm.concat({ prefix: prefix, sufix: sufix }))\r\n    setPrefix(\"\")\r\n    setSufix(\"\")\r\n  }\r\n\r\n  function deleteitem(e) {\r\n    setColumm(columm.splice(1))\r\n  }\r\n\r\n\r\n  async function handleQrcodeUnit(e) {\r\n    e.preventDefault()\r\n    setSpin(true)\r\n    const data = columm.map(columm => {\r\n      return columm.prefix + columm.sufix\r\n    })\r\n\r\n    try {\r\n\r\n      const resp = await api.post('unit', data)\r\n      if (resp.data.status === 'ok') {\r\n        setSpin(false)\r\n        alert(\"QR-Codes gerados com sucesso\")\r\n      } else if (resp.data.status === 'dados') {\r\n        setSpin(false)\r\n        alert(\"VERIFICAR OS DADOS DIGITADOS. \\r\\nFalta a vírgula no último código ou a quantidade de localizações é excedente a 1000.\")\r\n      } else {\r\n        setSpin(false)\r\n        alert(\"Erro ao gerar os QR-Codes. Tente novamente\")\r\n      }\r\n      setColumm([])\r\n\r\n    } catch (error) {\r\n      setSpin(false)\r\n      alert(\"Erro ao gerar os QR-Codes. Tente novamente\")\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <div>\r\n\r\n      <Card>\r\n        <div className=\"card\">\r\n          <h1>Gerar QR-Code Unidade</h1>\r\n          <Spinning enable={spin} />\r\n          <hr/>\r\n\r\n          <form onSubmit={handleQrcodeUnit}>\r\n            <FormLabel className=\"formlabel\" component=\"legend\">Adicionar item:</FormLabel>\r\n            <div className=\"localizacoes\">\r\n              <div className=\"prefix\">\r\n                <TextField\r\n                  className=\"textprefix\"\r\n                  id=\"outlined-search\"\r\n                  label=\"Prefixo\"\r\n                  type=\"search\"\r\n                  variant=\"outlined\"\r\n                  value={prefix} onChange={e => setPrefix(e.target.value)} />\r\n              </div>\r\n              <div className=\"sufix\">\r\n                <TextField\r\n                  className=\"textsufix\"\r\n                  id=\"outlined-search\"\r\n                  label=\"Localização\"\r\n                  type=\"search\"\r\n                  variant=\"outlined\"\r\n                  value={sufix} onChange={e => setSufix(e.target.value)} />\r\n              </div>\r\n              <div className=\"addbutton\">\r\n                <div className=\"plusbutton\">\r\n                  <Button variant=\"contained\" color=\"primary\" onClick={additem}>\r\n                    Adicionar\r\n                  </Button>\r\n                </div>\r\n                <div className=\"minusbutton\">\r\n                  <Button variant=\"contained\" color=\"primary\" onClick={deleteitem} >\r\n                    Excluir\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"formlabel\">\r\n            <FormLabel  component=\"legend\">Localizações:</FormLabel>\r\n            </div>\r\n            <div>\r\n              <TableComponent Name={tableString} Title={'Lista para geração de códigos'} />\r\n            </div>\r\n            <hr className='divLine' />\r\n            <div className=\"button\">\r\n              <Button event=\"precentDefault\" variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                Gerar códigos\r\n          </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </Card>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default QrcodeUnit;\r\n\r\n\r\nfunction Spinning(props) {\r\n\r\n  if (props.enable === true) {\r\n\r\n    return <div className=\"waitcode\"><h4>Aguardando geração de arquivos...</h4></div>\r\n\r\n  } else {\r\n\r\n    return <div></div>\r\n\r\n  }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport './Files.css'\r\nimport { Card } from '@material-ui/core'\r\nimport TableComponent from './Table'\r\nimport api from '../services/api'\r\n\r\nfunction Files() {\r\n\r\n  const [path, setPath] = useState('')\r\n  const [files, setFiles] = useState([])\r\n\r\n  useEffect(() => {\r\n\r\n    api.get('files').then(res => {\r\n      setFiles(res.data.status)\r\n      setPath(res.data.path)\r\n\r\n    }).catch(err => {\r\n      alert(\"Erro ao carregar os dados\")\r\n    })\r\n\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <Card >\r\n        <div className=\"cardFiles\">\r\n          <h1>Códigos gerados</h1>\r\n          <hr/>\r\n          <p><strong>Path: </strong>{path}</p>\r\n          <TableComponent Name={files} Title={'Arquivos Gerados'} />\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Files\r\n\r\n\r\n","\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Tabs from '@material-ui/core/Tabs'\r\nimport Tab from '@material-ui/core/Tab'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Box from '@material-ui/core/Box'\r\nimport QrcodeBatch from './QrcodeBatch'\r\nimport QrcodeUnit from './QrcodeUnit'\r\nimport Files from './Files'\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    'aria-controls': `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nexport default function SimpleTabs() {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0)\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs\">\r\n          <Tab label=\"QR-Code batelada\" {...a11yProps(0)} />\r\n          <Tab label=\"QR-Code Unitário\" {...a11yProps(1)} />\r\n          <Tab label=\"Arquivos Gerados\" {...a11yProps(2)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={value} index={0}>\r\n        <QrcodeBatch/>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <QrcodeUnit/>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}>\r\n        <Files/>\r\n      </TabPanel>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\nimport Main from './pages/Main'\n\nfunction App() {\n  return (\n    <Main/>\n  )\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\n\nReactDOM.render( <App />, document.getElementById('root'))\n\n"],"sourceRoot":""}